<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>笔记s on My New Hugo Site</title>
    <link>https://timingf.github.io/%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 笔记s on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Nov 2020 08:50:07 +0800</lastBuildDate><atom:link href="https://timingf.github.io/%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>K近邻算法</title>
      <link>https://timingf.github.io/%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/k-nn-k%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 23 Nov 2020 08:50:07 +0800</pubDate>
      
      <guid>https://timingf.github.io/%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/k-nn-k%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/</guid>
      <description>K近邻算法 1.简介 ​	KNN工作原理：存在一个样本数据集合，也称作为训练样本集，并且样本集中每个数据都存在标签，即我们知道样本集中每一个数据与所属分类的对应关系。输入没有标签的新数据后，将新的数据的每个特征与样本集中数据对应的特征进行比较，然后算法提取样本最相似数据(最近邻)的分类标签。一般来说，我们只选择样本数据集中前k个最相似的数据，这就是k-近邻算法中k的出处，通常k是不大于20的整数。最后，选择k个最相似数据中出现次数最多的分类，作为新数据的分类。
优点：精度高，对异常值不敏感，无数据输入假定。
缺点：计算复杂度高，空间复杂度高。
使用数据范围：数值型，标称型。
   电影名称 打斗镜头 接吻镜头      电影1 1 101 爱情片   电影2 5 89 爱情片   电影3 108 5 动作片   电影4 115 8 动作片    2.距离度量 设特征空间 X 是n维实数向量空间Rn, $$ x_{i},x_{j} \in \chi, x_{i}=(x_{i}^{(1)},x_{i}^{(2)},…,x_{i}^{(n)})^{T},x_{j}=(x_{i}^{(1)},x_{i}^{(2)},…,x_{i}^{(n)})^{T},x_i,x_j的L_P距离定义为： $$
$$ L_{p}(x_{i},x_{j}) = (\sum_{l=i}^{n}|x_{i}^{(l)}-x_{j}^{(l)}|^p)^{1/p} $$
p=1时称为曼哈顿距离(Manhattan distance);
p=2时称为欧式距离(Euclidean distance)；
p=∞时L为各坐标距离最大值
我们可以从散点图大致推断，这个红色圆点标记的电影可能属于动作片，因为距离已知的那两个动作片的圆点更近。k-近邻算法用什么方法进行判断呢？没错，就是距离度量。这个电影分类的例子有2个特征，也就是在2维实数向量空间，可以使用我们高中学过的两点距离公式计算距离 $$ |AB| = \sqrt{(x_{1}-x_{2})^{2}+(y_{1}-y_{2})^{2}} $$ 但仅仅只是计算出最小距离是不够的，这只能算是最近邻算法，而非K-近邻算法</description>
    </item>
    
    <item>
      <title></title>
      <link>https://timingf.github.io/%E7%AC%94%E8%AE%B0/leetcode%E5%88%B7%E9%A2%98/%E6%9C%80%E9%95%BF%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%90%E4%B8%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timingf.github.io/%E7%AC%94%E8%AE%B0/leetcode%E5%88%B7%E9%A2%98/%E6%9C%80%E9%95%BF%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%90%E4%B8%B2/</guid>
      <description>问题描述： 给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。 示例 1:输入: &amp;quot;abcabcbb&amp;quot;输出: 3 解释: 因为无重复字符的最长子串是 &amp;quot;abc&amp;quot;，所以其长度为 3。`示例 2:输入: &amp;quot;bbbbb&amp;quot;输出: 1解释: 因为无重复字符的最长子串是 &amp;quot;b&amp;quot;，所以其长度为 1。示例 3:输入: &amp;quot;pwwkew&amp;quot;输出: 3解释: 因为无重复字符的最长子串是 &amp;quot;wke&amp;quot;，所以其长度为 3。请注意，你的答案必须是 子串 的长度，&amp;quot;pwke&amp;quot; 是一个子序列，不是子串。方法一：滑动窗口法： 算法要点：前K-1个子串已是确定无重复子串，只要判断下一个字符在此字符串中是否重复即可。 class Solution { public: int lengthOfLongestSubstring(string s) { int size, i=0, j, k, max=0; size = s.size(); for(int j=0; j&amp;lt;size; j++){ for(int k=i; k&amp;lt;j; k++){ if(s[k] == s[j]){ j = k + 1; break; } }	if(j-i+1 &amp;gt; max) max = j-i+1; }	return max; } }; </description>
    </item>
    
    <item>
      <title></title>
      <link>https://timingf.github.io/%E7%AC%94%E8%AE%B0/leetcode%E5%88%B7%E9%A2%98/%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0/1.%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timingf.github.io/%E7%AC%94%E8%AE%B0/leetcode%E5%88%B7%E9%A2%98/%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0/1.%E9%93%BE%E8%A1%A8/</guid>
      <description>1.链表 1.1 检验链表是否有环&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;快慢指针
1.1（改）检测环的起始位置
​	1.2 链表中寻找重复元素&amp;mdash;&amp;mdash;&amp;ndash;&amp;gt;(下级方法) 使用STL的set集合存储 通过
set.find(head) != set.end()条件筛选
1.3复杂链表的深度拷贝——构造生成一个全新的链表，即使原链表毁坏，新链表可独立使用
方法：使用STL map将地址值转化为整型struct RandomListNode{ int data; struct RandomListNode *random; struct RandomListNode *next; RandomListNode(int x): data(x), random(NULL),next(NULL){ } }; class Solution{//------------------------- public: ListNode *copyRandomList(ListNode *head){ map&amp;lt;RandomListNode *, int&amp;gt; node_map; vector&amp;lt;RandomListNode *&amp;gt; node_vec; RandomListNode *ptr = head; int i=0; while(ptr){ node_vec.push_back(new RandomListNode(ptr-&amp;gt;data)); node_map[ptr] = i; //对应关系存储MAP数组 ??????? 	ptr = ptr-&amp;gt;next; i++; } node_vec.push_back(0); ptr = head; int i=0; while(ptr){ //将vec中的 next 与 random指针补全 	node_vec[i]-&amp;gt;next = node_vec[i+1]; //?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://timingf.github.io/%E7%AC%94%E8%AE%B0/leetcode%E5%88%B7%E9%A2%98/%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0/2.%E6%A0%88%E9%98%9F%E5%88%97%E5%A0%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timingf.github.io/%E7%AC%94%E8%AE%B0/leetcode%E5%88%B7%E9%A2%98/%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0/2.%E6%A0%88%E9%98%9F%E5%88%97%E5%A0%86/</guid>
      <description>2.栈、队列、堆 栈与队列 ①栈和队列分别可通过制造两个相同结构模拟对方 ​	&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;均在push（）函数内操作，其他不变
//------------ 用栈模拟队列---------------- void push(x){ stack&amp;lt;int&amp;gt; temp_stack; while(!_data.empty()){ int temp = _data.top(); _data.pop(); temp_stack.push(temp); } temp_stack.push(x); while(!temp_stack.empty()){ int temp = temp_stack.top(); temp_stack.pop(); _data.push(temp);	} } // --------------用队列模拟栈------------ void push(int x){ queue&amp;lt;int&amp;gt; temp_queue; temp_queue.push(x); while(!_data.empty()){ temp_queue.push(_data.front()); _data.pop();	} while(!temp_queue.empty()){ _data.push(temp.front()); temp_queue.pop(); } } ②计算器考虑使用栈的有穷自动状态机表示 堆 ①在乱序数组中寻找第K大的数 ​	|&amp;mdash;&amp;mdash;-若先排序后寻找，需要的时间复杂度为 N log N ，当N很大 K却很小时，所花时间远远大于预期。
​	为了保证效率， 尽可能使得复杂度降为 N log K 。
​	|&amp;mdash;&amp;mdash;-引入小根堆，保证这K个值为数组中最大，最后弹出栈顶元素，即为第K大元素
​	（当传入元素大于栈顶元素时，弹出栈顶元素，将新元素加入后排序）int FindKthLargeElement(vector&amp;lt;int&amp;gt; &amp;amp;nums, int k){ priority_queue&amp;lt;int, vector&amp;lt;int&amp;gt;, greater&amp;lt;int&amp;gt;&amp;gt; Q; // STL标准库中的小根堆  //priority_queue&amp;lt;int, vector&amp;lt;int&amp;gt;, less&amp;lt;int&amp;gt;&amp;gt; Q; // STL标准库中的大根堆(默认为大根堆) 	for(int i=0; i&amp;lt;nums.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://timingf.github.io/%E7%AC%94%E8%AE%B0/leetcode%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%B1%BB/321.-%E6%8B%BC%E6%8E%A5%E6%9C%80%E5%A4%A7%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timingf.github.io/%E7%AC%94%E8%AE%B0/leetcode%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%B1%BB/321.-%E6%8B%BC%E6%8E%A5%E6%9C%80%E5%A4%A7%E6%95%B0/</guid>
      <description>[321. 拼接最大数] 给定长度分别为 m 和 n 的两个数组，其元素由 0-9 构成，表示两个自然数各位上的数字。现在从这两个数组中选出 k (k &amp;lt;= m + n) 个数字拼接成一个新的数，要求从同一个数组中取出的数字保持其在原数组中的相对顺序。
求满足该条件的最大数。结果返回一个表示该最大数的长度为 k 的数组。
说明: 请尽可能地优化你算法的时间和空间复杂度。
示例 1:
输入:nums1 = [3, 4, 6, 5]nums2 = [9, 1, 2, 5, 8, 3]k = 5输出:[9, 8, 6, 5, 3]示例 2:
输入:nums1 = [6, 7]nums2 = [6, 0, 4]k = 5输出:[6, 7, 6, 0, 4]示例 3:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://timingf.github.io/%E7%AC%94%E8%AE%B0/leetcode%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%B1%BB/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timingf.github.io/%E7%AC%94%E8%AE%B0/leetcode%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%B1%BB/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</guid>
      <description>买卖股票最佳时机（贪心） 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
示例 1: 输入: [7,1,5,3,6,4]输出: 7解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。示例 2: 输入: [1,2,3,4,5]输出: 4解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。示例 3: 输入: [7,6,4,3,1]输出: 0解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。 方法一：暴力法 方法二：贪心法 思路：保证局部最优代码：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://timingf.github.io/%E7%AC%94%E8%AE%B0/leetcode%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%B1%BB/%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timingf.github.io/%E7%AC%94%E8%AE%B0/leetcode%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%B1%BB/%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C/</guid>
      <description>分发糖果 老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。
你需要按照以下要求，帮助老师给这些孩子分发糖果：
每个孩子至少分配到 1 个糖果。 相邻的孩子中，评分高的孩子必须获得更多的糖果。 那么这样下来，老师至少需要准备多少颗糖果呢？
示例 1:
输入: [1,0,2]输出: 5解释: 你可以分别给这三个孩子分发 2、1、2 颗糖果。示例 2:
输入: [1,2,2]输出: 4解释: 你可以分别给这三个孩子分发 1、2、1 颗糖果。第三个孩子只得到 1 颗糖果，这已满足上述两个条件。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://timingf.github.io/%E7%AC%94%E8%AE%B0/leetcode%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%B1%BB/%E5%8A%A0%E6%B2%B9%E7%AB%99/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timingf.github.io/%E7%AC%94%E8%AE%B0/leetcode%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%B1%BB/%E5%8A%A0%E6%B2%B9%E7%AB%99/</guid>
      <description>加油站 一、题目描述 在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。
你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。
如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。
说明:
  如果题目有解，该答案即为唯一答案。
  输入数组均为非空数组，且长度相同。
  输入数组中的元素均为非负数。
  示例 1:
输入: gas = [1,2,3,4,5]cost = [3,4,5,1,2]输出: 3解释:从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。因此，3 可为起始索引。示例 2:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://timingf.github.io/%E7%AC%94%E8%AE%B0/leetcode%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%B1%BB/%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E5%AD%97%E6%AF%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timingf.github.io/%E7%AC%94%E8%AE%B0/leetcode%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%B1%BB/%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E5%AD%97%E6%AF%8D/</guid>
      <description>去除重复字母 一、题目描述 给你一个仅包含小写字母的字符串，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证返回结果的字典序最小（要求不能打乱其他字符的相对位置）。
示例 1:
输入: &amp;quot;bcabc&amp;quot;输出: &amp;quot;abc&amp;quot;示例 2:
输入: &amp;quot;cbacdcbc&amp;quot;输出: &amp;quot;acdb&amp;quot;二、解题方法 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://timingf.github.io/%E7%AC%94%E8%AE%B0/leetcode%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%B1%BB/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timingf.github.io/%E7%AC%94%E8%AE%B0/leetcode%E5%88%B7%E9%A2%98/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%B1%BB/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</guid>
      <description>跳跃游戏 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://timingf.github.io/%E7%AC%94%E8%AE%B0/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timingf.github.io/%E7%AC%94%E8%AE%B0/readme/</guid>
      <description>可以不可以通过目标检测区分图片</description>
    </item>
    
    <item>
      <title></title>
      <link>https://timingf.github.io/%E7%AC%94%E8%AE%B0/roberts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timingf.github.io/%E7%AC%94%E8%AE%B0/roberts/</guid>
      <description>边缘检测算子：Roberts 、Sobel 、Prewitt、Laplacian、Log/Marr、Canny、Kirsch、Nevitia
Roberts</description>
    </item>
    
    <item>
      <title></title>
      <link>https://timingf.github.io/%E7%AC%94%E8%AE%B0/%E6%9C%AA%E5%91%BD%E5%90%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timingf.github.io/%E7%AC%94%E8%AE%B0/%E6%9C%AA%E5%91%BD%E5%90%8D/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://timingf.github.io/%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timingf.github.io/%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>基础知识 NUMPY矩阵与与数组的区别 numpy函数库中存在两种不同的数据类型（矩阵matrix和数组array），都可以用于处理行列表示的数字元素。虽然很相似，但再这两个数据类型上执行相同的数字运算可能得到不同的结果,其中Numpy函数库中的matrix与MATLAB中matrices等价。
from numpy import * a = random.rand(n,n) #------&amp;gt;生成N * N的 array 类型数组 randMax = mat(a) # 将 a 转化为 maxtrix类型 invRandMax = randMax.I # 转化为maxtrix类型后就可以取矩阵的逆了 myEye = randMax*invRandMax # 矩阵与逆矩阵相乘 myEye - eye(4) # 实际矩阵产生的误差 np.tile()函数解析 np.tile(array, n) # 第二个参数默认为拓展X轴（即横向拓展n倍） np,tile(array,(n,m))	# 当第二参数为元组时 第一项为Y轴（纵向）,第二项为X轴（横向）  #例子 -------------------------------------- list = np.array([[1, 0], [0, 1], [1, 1], [2, 3]]) out1 = np.tile(list, 2) out2 = np.tile(list, (2, 1)) print(&amp;#39;out1=&amp;#39;, out1) print(&amp;#39;out2=&amp;#39;, out2) np.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://timingf.github.io/%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timingf.github.io/%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/</guid>
      <description>支持向量机 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://timingf.github.io/%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timingf.github.io/%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/</guid>
      <description>贝叶斯分类器 1. 简介 朴素贝叶斯模型与决策树模型是两个最为广泛的分类模型。贝叶斯分类算法在数据集较大的情况下表现出较高的 ，同时算法本身也比较简单。 朴素贝叶斯方法是在贝叶斯算法的基础上进行了相应的简化，即假定给定目标值时属性之间相互条件独立。 也就是说没有哪个属性变量对于决策结果来说占有着较大的比重，也没有哪个属性变量对于决策结果占有着较小的比重。虽然这个简化方式在一定程度上降低了贝叶斯分类算法的分类效果，但是在实际的应用场景中，极大地简化了贝叶斯方法的复杂性。
2. 贝叶斯决策论 贝叶斯决策论是概率框架下实施决策的基本方法，它考虑如何基于这些概率和误判损失来选择最优的类别标记。
3. 基于贝叶斯决策理论的分类方法 优点：在数据较少的情况下仍然有效，可以处理类别问题。
缺点：对于输入数据的准备方式较为敏感。
适用数据类型：标称型数据（标称型：标称型目标变量的结果只在有限目标集中取值，如真与假(标称型目标变量主要用于分类)一般在有限的数据中取，而且只存在‘是’和‘否’两种不同的结果）
 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://timingf.github.io/%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E7%AE%97%E6%B3%95%E4%B8%8E%E5%BA%94%E7%94%A8/%E5%9B%BE%E5%83%8F%E9%87%87%E9%9B%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timingf.github.io/%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E7%AE%97%E6%B3%95%E4%B8%8E%E5%BA%94%E7%94%A8/%E5%9B%BE%E5%83%8F%E9%87%87%E9%9B%86/</guid>
      <description>图像采集 本章介绍了在照明，镜头，摄像机，摄像机与计算机接口。为了能够选择一套适合实验的机器视觉设备，图像采集所需的硬件选择显得格外重要，它直接决定了图片的质量与否，是进行机器视觉实验的第一步。
[TOC]
1.照明（Illumination） 目的：使被测物的重要特征显现，抑制不需要的特征。
方法：用单色光照射彩色物体增强对比度
波长范围：（1）可见光：380~780nm；（2）紫外光（Ultraviolet，UV）：约100~380nm; (3) 红外光（Infrared, IR)：约780nm~1μm
1.1.光源类型 白炽灯，氙灯，荧光灯，发光二极管（LED）
1.2.光与被测物体的相互作用 现实中，镜面反射几乎不可能像镜子一样的理想状态。相反，镜面反射在一定角度产生较强的波瓣形反射，如图2.3所示：
入射光出了反射和透射外剩下的光线都被吸收转化为了物体的热能。除镜面反射外，各个物理量都取决于投射到物体的光的波长。实际操作时为了找到合适的光源要进行大量的实验。
1.3利用照明的光谱 如上所说，彩色物体反射了部分光谱，其他部分被吸收。可以利用这一特点增强需要的特征。例如：绿色背景上的红色被测物需要增强，就可以使用红色照明，这时红色物体会更加明亮，同时绿色物体会变得更加暗淡。
以PCB板为例：CCD和CMOS对红外敏感，芯片对红光敏感，印刷字符对绿光敏感。因此需要区分出元器件可以直接使用彩色光源或者该光源的过滤光镜进行区分度过滤。
另一种非常有用的滤光片就是偏振片。由于光线在金属和绝缘体表面反射是光线会产生部分偏振。我们可以在摄像机前面加上偏振滤镜并调整方向来抑制偏振光。因此更好抑制某些反射的方法是先使光线成为偏振光，然后在落到物体表面，方法如图2.6,图2.7：1.4.利用照明的方向性 方向性有两种效果：
​	（1）光源可以是漫射或直接照射的。漫射时，光在各个方向的强度几乎一样的；直接照射时，光源发出的光集中在非常窄的空间范围。在特定情况下，光源仅发出单向平行光，称作平行光照明（原理与2.4节远心镜头原理相同）。
​	（2）光源与摄像机和被测物的相对位置也很重要。光源与摄像机位于被测物同一侧——正面光；光源与摄像机位于被测物两侧——背光（被测物为透明物体时称作透射光）；光源与被测物成一定角度使得绝大部分光反射到摄像机——明场照明；光源与被测物成一定角度使得绝大部分光没有反射到摄像机——暗场照明。
2.镜头（Lenses） 镜头是一种光学设备，用于聚焦光线在摄像机内部成像（指在数字传感器上成像）。镜头的作用是产生锐利的图像，以得到被测物的细节。本节讨论使用不同镜头产生不同的成像集合，镜头的主要像差（该参数会影响图像算法的精度）。
2.1.针孔摄像机 忽略光的波动性，可将光看做在同类介质中直线传播的光线。图2.17为针孔摄像机成像模型：
2.2.高斯光学 由于针孔摄像机针孔太小，只有极少量的光线能通过小孔到达像平面，因此必须采用非常长的曝光时间以得到亮度足够的图像。因此真正的摄像机使用镜头收束光线。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://timingf.github.io/%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E7%AE%97%E6%B3%95%E4%B8%8E%E5%BA%94%E7%94%A8/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timingf.github.io/%E7%AC%94%E8%AE%B0/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E7%AE%97%E6%B3%95%E4%B8%8E%E5%BA%94%E7%94%A8/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E7%AE%97%E6%B3%95/</guid>
      <description>机器视觉算法 [TOC]
图像采集一章讲述了将一张图像传送到计算机这一过程中所需的各种硬件部件。例如：为了突出感兴趣的物体时，光源是至关重要的；为了在恰当时刻正确曝光来拍摄一幅图像时，带有外触发功能的图像卡和摄像机就是解决问题的关键；为了获取清晰且没有畸变的图像，镜头就变得很重要。但设备并不会真正去“看”，并不能提取我们感兴趣的信息。就如人的眼睛仅仅只是一个传感器，没有大脑的协助我们仍然处理不了所看到的信息。因此在传感器将图像数据传送到计算机后，对这些图像数据传送到计算机后，对这些图像数据的处理才是机器视觉过程的真正关键。
1.数据结构 本节介绍图像、区域和亚像素轮廓的数据结构。
1.1. 图像 机器视觉里，图像是基本的数据结构，它所包含的数据通常是由图像采集设备传送到计算机内存中的。一个像素能被看成对能量的采样结果，此能量是在曝光过程中传感器 上一个感光单元所累积得到的，它积累了在传感器光谱响应范围内的所有光能。传感器的光谱响应通常包括全部可见光谱和部分近红外光谱。因此，黑白摄像机会返回每个像素所对应的一个能量的采样结果，这些结果就组成了一副单通道灰度值图像。而对RGB彩色摄像机，它将返回每个像素所对应的三个采样结果，也就是一幅三通道图像。再还有遥感图像，图像的每个像素对应非常多的能量采样结果，这样做的目的是对光谱进行更细致的采样，所以每个像素对应更多个能量样本也是可以的。例如，HYDICE传感器的每个像素可以采集210个光谱采样结果。所以，为了处理所有可能的应用，图像可以被视为由一组任意多的通道组成的。很直观地，图像通道可以被简单地看作是一个二维数组，这也是程序设计语言中表示图像时所使用的数据结构。因此在像素（r, c）处的灰度值可以被解释为矩阵： $$ g = f_{r,c} $$ 中的一个元素。使用更正规的描述方式，视某个宽度为 **W** ，高度为 **h** 的图像通道 **f** 为一个函数，该函数表述从离散二维平面的一个矩形子集 $$ R={0,&amp;hellip;,h-1}*{0,&amp;hellip;,w-1},R {\subset} Z^{2} (Z^{2}为离散二维平面) $$ 到某一个实数的关系，像素位置是（r,c）处的灰度值 **g** ，定义为 **g = f(r,c)**。
图像采集设备不但在空间上把图像离散化，同事也会把灰度值离散化到某个固定的 灰度级范围内。多数情况下，灰度值被离散化为8位（一个字节），即所有可能的灰度值所组成的集合是 $$ 2^{8}=256, 即G_{8}={0,&amp;hellip;,255} $$ 有些情况下则需要使用更高的位深。自此**我们已视一幅图像为一个在空间上采样的函数**，如此处理是因为我们就是以这种方式从图像采集设备获取图像的。
1.2. 区域 机器视觉的任务之一就是识别图像中包含某些特性的区域(感兴趣区域ROI)，比如执行一个阈值分割处理（见1.4节）。因此我们还需要一种数据结构，它可以表示一幅图像中一个任意的像素子集。故而，我们把区域定义为离散平面的一个任意子集: $$ R {\subset}Z^{2} $$ {r} 对任意图像，可以用一个包含该图像所有像素点的矩形感兴趣区域来表示该幅图像。我们默认每幅图像都有一个相关的感兴趣区域存在，这个感兴趣区域用 R 来表示。很多时候需要描述一幅图像上多个物体，它们可以由区域的集合来简单地表示。但现在我们还不清楚最好的表示区域的方法。数学上，我们能把区域描述成集合。另一种等价定义将使用区域的特征函数： $$ \begin{equation} {\chi}_{R}{(r,c)}= \begin{cases} 1&amp;amp; , \text{(r,c)} {\in} R\
0&amp;amp; ,\text{(r,c)}{\notin}R \end{cases} \end{equation} $$ 这个定义引入了二值图像来描述区域。一个二值图像用灰度值0表示不在区域内的点，用1（或其他非0的数）表示被包含在区域内的点。同样的我们可以将图像中多个目标物体描绘成多个标记图像，图像中像素灰度值表示此像素属于哪个区域，大于0的标记被用来表示不同区域，0为不被包含的点。
二值图像的弊端：（1）必须存储区域外的点，效率不高； （2）二值图像不易向负坐标区域保存扩展； （3）用标记图像表示多个区域时无法描述交叠区域。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://timingf.github.io/%E7%AC%94%E8%AE%B0/%E8%AE%BA%E6%96%87%E8%A6%81%E7%82%B9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://timingf.github.io/%E7%AC%94%E8%AE%B0/%E8%AE%BA%E6%96%87%E8%A6%81%E7%82%B9/</guid>
      <description>论文要点：
​	1.千分尺测量大小并图像分割定位，图像标定，摄像头标定。
​	2.物体的绝对位置与图像相对位置的插值做逼近，用XX方法逼近，再用亚像素拟合求得像素点圆的中心&amp;mdash;&amp;mdash;&amp;mdash;PCB板的焊点定位
 3.单目视觉定位-----了解摄像机的基本参数 ​	4.高斯（/赛贝尔/螺旋线）曲线图像逼近像素，纽曼曲线逼近圆圆心</description>
    </item>
    
  </channel>
</rss>
